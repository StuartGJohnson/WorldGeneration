#usda 1.0
(
    defaultPrim = "World"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "World"
{
    def PhysicsScene "physicsScene"
    {
        float physics:contactOffset = 0.02
        vector3f physics:gravityDirection = (0, 0, -1)
        float physics:gravityMagnitude = 9.81
        int physics:positionIterations = 16
        float physics:restOffset = 0.001
        int physics:velocityIterations = 8
    }

    def Xform "ground_plane"
    {
        float3 xformOp:scale = (3, 6, 0.05)
        double3 xformOp:translate = (0, 0, -0.05)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/ground_plane_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "ground_plane_material"
    {
        token outputs:surface.connect = </World/ground_plane_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.2977907, 0.2977907, 0.2977907)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_0"
    {
        float3 xformOp:scale = (0.103751615, 0.103751615, 0.020492835)
        double3 xformOp:translate = (-2.5, -4, 0.020492834980723545)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_0_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_0_material"
    {
        token outputs:surface.connect = </World/pn_pillar_0_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.3650176, 0.3650176, 0.3650176)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_1"
    {
        float3 xformOp:scale = (0.20150492, 0.20150492, 0.02170589)
        double3 xformOp:translate = (-2.5, -3.5, 0.021705890177050158)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_1_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_1_material"
    {
        token outputs:surface.connect = </World/pn_pillar_1_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.73530775, 0.73530775, 0.73530775)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_2"
    {
        float3 xformOp:scale = (0.10446958, 0.10446958, 0.017774023)
        double3 xformOp:translate = (-2.5, 0.5, 0.017774022746065883)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_2_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_2_material"
    {
        token outputs:surface.connect = </World/pn_pillar_2_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.33118278, 0.33118278, 0.33118278)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_3"
    {
        float3 xformOp:scale = (0.12982565, 0.12982565, 0.0128317)
        double3 xformOp:translate = (-2.5, 1, 0.012831699621048296)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_3_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_3_material"
    {
        token outputs:surface.connect = </World/pn_pillar_3_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.58993065, 0.58993065, 0.58993065)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_4"
    {
        float3 xformOp:scale = (0.18838985, 0.18838985, 0.015255508)
        double3 xformOp:translate = (-2.5, 1.5, 0.015255507775508709)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_4_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_4_material"
    {
        token outputs:surface.connect = </World/pn_pillar_4_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.6856583, 0.6856583, 0.6856583)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_5"
    {
        float3 xformOp:scale = (0.20472091, 0.20472091, 0.02257274)
        double3 xformOp:translate = (-2.5, 2, 0.0225727406479101)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_5_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_5_material"
    {
        token outputs:surface.connect = </World/pn_pillar_5_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.4041503, 0.4041503, 0.4041503)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_6"
    {
        float3 xformOp:scale = (0.15048918, 0.15048918, 0.024465164)
        double3 xformOp:translate = (-2.5, 2.5, 0.024465163402584766)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_6_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_6_material"
    {
        token outputs:surface.connect = </World/pn_pillar_6_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.2556475, 0.2556475, 0.2556475)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_7"
    {
        float3 xformOp:scale = (0.19055891, 0.19055891, 0.02309368)
        double3 xformOp:translate = (-2.5, 5, 0.02309367957934325)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_7_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_7_material"
    {
        token outputs:surface.connect = </World/pn_pillar_7_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.68427694, 0.68427694, 0.68427694)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_8"
    {
        float3 xformOp:scale = (0.24596736, 0.24596736, 0.01920285)
        double3 xformOp:translate = (-2, -5, 0.01920285114318376)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_8_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_8_material"
    {
        token outputs:surface.connect = </World/pn_pillar_8_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.42712063, 0.42712063, 0.42712063)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_9"
    {
        float3 xformOp:scale = (0.19277796, 0.19277796, 0.022867559)
        double3 xformOp:translate = (-2, -2.5, 0.022867558303162436)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_9_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_9_material"
    {
        token outputs:surface.connect = </World/pn_pillar_9_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.71702415, 0.71702415, 0.71702415)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_10"
    {
        float3 xformOp:scale = (0.106873654, 0.106873654, 0.021307148)
        double3 xformOp:translate = (-1.5, -4, 0.021307147952686546)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_10_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_10_material"
    {
        token outputs:surface.connect = </World/pn_pillar_10_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.33673897, 0.33673897, 0.33673897)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_11"
    {
        float3 xformOp:scale = (0.13491863, 0.13491863, 0.0134974)
        double3 xformOp:translate = (-1.5, -3.5, 0.013497399711545344)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_11_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_11_material"
    {
        token outputs:surface.connect = </World/pn_pillar_11_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.26060086, 0.26060086, 0.26060086)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_12"
    {
        float3 xformOp:scale = (0.15472482, 0.15472482, 0.020446055)
        double3 xformOp:translate = (-1.5, -3, 0.020446055553305004)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_12_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_12_material"
    {
        token outputs:surface.connect = </World/pn_pillar_12_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.4221086, 0.4221086, 0.4221086)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_13"
    {
        float3 xformOp:scale = (0.24049819, 0.24049819, 0.015837222)
        double3 xformOp:translate = (-1.5, 2.5, 0.01583722277561392)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_13_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_13_material"
    {
        token outputs:surface.connect = </World/pn_pillar_13_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.58882123, 0.58882123, 0.58882123)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_14"
    {
        float3 xformOp:scale = (0.20936902, 0.20936902, 0.014639233)
        double3 xformOp:translate = (-1, 3, 0.014639233102476213)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_14_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_14_material"
    {
        token outputs:surface.connect = </World/pn_pillar_14_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.2980415, 0.2980415, 0.2980415)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_15"
    {
        float3 xformOp:scale = (0.19599997, 0.19599997, 0.024869042)
        double3 xformOp:translate = (-0.5, -1.5, 0.02486904188295744)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_15_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_15_material"
    {
        token outputs:surface.connect = </World/pn_pillar_15_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.53416985, 0.53416985, 0.53416985)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_16"
    {
        float3 xformOp:scale = (0.21639998, 0.21639998, 0.02303565)
        double3 xformOp:translate = (-0.5, -1, 0.02303564900237262)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_16_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_16_material"
    {
        token outputs:surface.connect = </World/pn_pillar_16_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.33742884, 0.33742884, 0.33742884)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_17"
    {
        float3 xformOp:scale = (0.14016113, 0.14016113, 0.016443163)
        double3 xformOp:translate = (-0.5, 2.5, 0.016443163100738525)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_17_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_17_material"
    {
        token outputs:surface.connect = </World/pn_pillar_17_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.3265897, 0.3265897, 0.3265897)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_18"
    {
        float3 xformOp:scale = (0.14720169, 0.14720169, 0.023454595)
        double3 xformOp:translate = (-0.5, 3, 0.02345459533090836)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_18_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_18_material"
    {
        token outputs:surface.connect = </World/pn_pillar_18_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.5932632, 0.5932632, 0.5932632)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_19"
    {
        float3 xformOp:scale = (0.16882777, 0.16882777, 0.023931844)
        double3 xformOp:translate = (0, -4.5, 0.023931844871756796)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_19_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_19_material"
    {
        token outputs:surface.connect = </World/pn_pillar_19_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.3589281, 0.3589281, 0.3589281)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_20"
    {
        float3 xformOp:scale = (0.13941124, 0.13941124, 0.019517101)
        double3 xformOp:translate = (0, -3.5, 0.019517101677039385)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_20_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_20_material"
    {
        token outputs:surface.connect = </World/pn_pillar_20_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.55075157, 0.55075157, 0.55075157)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_21"
    {
        float3 xformOp:scale = (0.1328981, 0.1328981, 0.017492507)
        double3 xformOp:translate = (0, -3, 0.017492506314254967)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_21_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_21_material"
    {
        token outputs:surface.connect = </World/pn_pillar_21_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.7985226, 0.7985226, 0.7985226)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_22"
    {
        float3 xformOp:scale = (0.10706746, 0.10706746, 0.013636367)
        double3 xformOp:translate = (0, -2.5, 0.013636367652172424)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_22_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_22_material"
    {
        token outputs:surface.connect = </World/pn_pillar_22_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.26578948, 0.26578948, 0.26578948)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_23"
    {
        float3 xformOp:scale = (0.163324, 0.163324, 0.022400992)
        double3 xformOp:translate = (0, -2, 0.022400992054537053)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_23_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_23_material"
    {
        token outputs:surface.connect = </World/pn_pillar_23_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.23811662, 0.23811662, 0.23811662)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_24"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (0, -1.5, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_24_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_24_material"
    {
        token outputs:surface.connect = </World/pn_wall_24_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.7976728, 0.7976728, 0.7976728)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_25"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (0, -1, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_25_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_25_material"
    {
        token outputs:surface.connect = </World/pn_wall_25_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.51746863, 0.51746863, 0.51746863)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_26"
    {
        float3 xformOp:scale = (0.22911696, 0.22911696, 0.02463848)
        double3 xformOp:translate = (0, -0.5, 0.024638479720170227)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_26_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_26_material"
    {
        token outputs:surface.connect = </World/pn_pillar_26_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.20688862, 0.20688862, 0.20688862)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_27"
    {
        float3 xformOp:scale = (0.18054555, 0.18054555, 0.02102138)
        double3 xformOp:translate = (0, 2, 0.021021379612832188)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_27_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_27_material"
    {
        token outputs:surface.connect = </World/pn_pillar_27_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.3600951, 0.3600951, 0.3600951)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_28"
    {
        float3 xformOp:scale = (0.16521479, 0.16521479, 0.013894402)
        double3 xformOp:translate = (0, 3.5, 0.013894402169948456)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_28_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_28_material"
    {
        token outputs:surface.connect = </World/pn_pillar_28_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.47223422, 0.47223422, 0.47223422)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_29"
    {
        float3 xformOp:scale = (0.13950835, 0.13950835, 0.023448162)
        double3 xformOp:translate = (0.5, -5.5, 0.02344816175472743)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_29_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_29_material"
    {
        token outputs:surface.connect = </World/pn_pillar_29_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.50035167, 0.50035167, 0.50035167)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_30"
    {
        float3 xformOp:scale = (0.23057778, 0.23057778, 0.023907848)
        double3 xformOp:translate = (0.5, -5, 0.02390784799181026)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_30_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_30_material"
    {
        token outputs:surface.connect = </World/pn_pillar_30_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.37906688, 0.37906688, 0.37906688)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_31"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (0.5, -4.5, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_31_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_31_material"
    {
        token outputs:surface.connect = </World/pn_wall_31_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.5653821, 0.5653821, 0.5653821)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_32"
    {
        float3 xformOp:scale = (0.21437661, 0.21437661, 0.014410491)
        double3 xformOp:translate = (0.5, -4, 0.014410490856870435)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_32_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_32_material"
    {
        token outputs:surface.connect = </World/pn_pillar_32_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.5236274, 0.5236274, 0.5236274)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_33"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (0.5, -3.5, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_33_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_33_material"
    {
        token outputs:surface.connect = </World/pn_wall_33_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.5182122, 0.5182122, 0.5182122)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_34"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (0.5, -3, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_34_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_34_material"
    {
        token outputs:surface.connect = </World/pn_wall_34_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.20034313, 0.20034313, 0.20034313)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_35"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (0.5, -2.5, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_35_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_35_material"
    {
        token outputs:surface.connect = </World/pn_wall_35_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.39449364, 0.39449364, 0.39449364)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_36"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (0.5, -2, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_36_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_36_material"
    {
        token outputs:surface.connect = </World/pn_wall_36_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.21168604, 0.21168604, 0.21168604)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_37"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (0.5, -1.5, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_37_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_37_material"
    {
        token outputs:surface.connect = </World/pn_wall_37_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.75745916, 0.75745916, 0.75745916)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_38"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (0.5, -1, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_38_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_38_material"
    {
        token outputs:surface.connect = </World/pn_wall_38_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.7272331, 0.7272331, 0.7272331)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_39"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (0.5, -0.5, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_39_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_39_material"
    {
        token outputs:surface.connect = </World/pn_wall_39_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.69899935, 0.69899935, 0.69899935)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_40"
    {
        float3 xformOp:scale = (0.10868877, 0.10868877, 0.016343927)
        double3 xformOp:translate = (0.5, 0, 0.01634392656753327)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_40_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_40_material"
    {
        token outputs:surface.connect = </World/pn_pillar_40_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.72680575, 0.72680575, 0.72680575)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_41"
    {
        float3 xformOp:scale = (0.17289858, 0.17289858, 0.013570668)
        double3 xformOp:translate = (0.5, 2, 0.013570668150848486)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_41_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_41_material"
    {
        token outputs:surface.connect = </World/pn_pillar_41_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.24152751, 0.24152751, 0.24152751)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_42"
    {
        float3 xformOp:scale = (0.11925872, 0.11925872, 0.02207293)
        double3 xformOp:translate = (0.5, 3, 0.022072930366337347)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_42_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_42_material"
    {
        token outputs:surface.connect = </World/pn_pillar_42_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.48516944, 0.48516944, 0.48516944)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_43"
    {
        float3 xformOp:scale = (0.23086496, 0.23086496, 0.015813207)
        double3 xformOp:translate = (0.5, 3.5, 0.01581320786175074)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_43_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_43_material"
    {
        token outputs:surface.connect = </World/pn_pillar_43_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.45388275, 0.45388275, 0.45388275)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_44"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (1, -5.5, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_44_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_44_material"
    {
        token outputs:surface.connect = </World/pn_wall_44_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.52357763, 0.52357763, 0.52357763)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_45"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (1, -5, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_45_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_45_material"
    {
        token outputs:surface.connect = </World/pn_wall_45_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.63795865, 0.63795865, 0.63795865)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_46"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (1, -4.5, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_46_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_46_material"
    {
        token outputs:surface.connect = </World/pn_wall_46_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.32069063, 0.32069063, 0.32069063)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_47"
    {
        float3 xformOp:scale = (0.2492724, 0.2492724, 0.016396454)
        double3 xformOp:translate = (1, -4, 0.01639645364126119)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_47_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_47_material"
    {
        token outputs:surface.connect = </World/pn_pillar_47_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.58992684, 0.58992684, 0.58992684)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_48"
    {
        float3 xformOp:scale = (0.11815063, 0.11815063, 0.018969698)
        double3 xformOp:translate = (1, -3.5, 0.018969698012944885)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_48_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_48_material"
    {
        token outputs:surface.connect = </World/pn_pillar_48_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.3348184, 0.3348184, 0.3348184)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_49"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (1, -3, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_49_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_49_material"
    {
        token outputs:surface.connect = </World/pn_wall_49_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.55298525, 0.55298525, 0.55298525)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_50"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (1, -2.5, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_50_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_50_material"
    {
        token outputs:surface.connect = </World/pn_wall_50_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.33806884, 0.33806884, 0.33806884)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_51"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (1, -2, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_51_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_51_material"
    {
        token outputs:surface.connect = </World/pn_wall_51_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.33213043, 0.33213043, 0.33213043)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_52"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (1, -1.5, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_52_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_52_material"
    {
        token outputs:surface.connect = </World/pn_wall_52_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.24259585, 0.24259585, 0.24259585)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_53"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (1, -1, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_53_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_53_material"
    {
        token outputs:surface.connect = </World/pn_wall_53_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.5786618, 0.5786618, 0.5786618)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_54"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (1, -0.5, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_54_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_54_material"
    {
        token outputs:surface.connect = </World/pn_wall_54_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.33736506, 0.33736506, 0.33736506)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_55"
    {
        float3 xformOp:scale = (0.22894531, 0.22894531, 0.02381775)
        double3 xformOp:translate = (1, 0, 0.0238177501625766)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_55_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_55_material"
    {
        token outputs:surface.connect = </World/pn_pillar_55_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.24251442, 0.24251442, 0.24251442)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_56"
    {
        float3 xformOp:scale = (0.13213553, 0.13213553, 0.020862222)
        double3 xformOp:translate = (1, 3.5, 0.020862222228703507)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_56_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_56_material"
    {
        token outputs:surface.connect = </World/pn_pillar_56_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.27938712, 0.27938712, 0.27938712)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_57"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (1.5, -5.5, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_57_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_57_material"
    {
        token outputs:surface.connect = </World/pn_wall_57_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.54262584, 0.54262584, 0.54262584)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_58"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (1.5, -5, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_58_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_58_material"
    {
        token outputs:surface.connect = </World/pn_wall_58_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.4836026, 0.4836026, 0.4836026)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_59"
    {
        float3 xformOp:scale = (0.22112454, 0.22112454, 0.022307742)
        double3 xformOp:translate = (1.5, -4.5, 0.022307742803634418)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_59_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_59_material"
    {
        token outputs:surface.connect = </World/pn_pillar_59_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.31424594, 0.31424594, 0.31424594)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_60"
    {
        float3 xformOp:scale = (0.16353679, 0.16353679, 0.01788814)
        double3 xformOp:translate = (1.5, -3, 0.01788813978007972)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_60_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_60_material"
    {
        token outputs:surface.connect = </World/pn_pillar_60_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.4802148, 0.4802148, 0.4802148)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_61"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (1.5, -2.5, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_61_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_61_material"
    {
        token outputs:surface.connect = </World/pn_wall_61_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.60401875, 0.60401875, 0.60401875)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_62"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (1.5, -2, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_62_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_62_material"
    {
        token outputs:surface.connect = </World/pn_wall_62_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.79049915, 0.79049915, 0.79049915)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_63"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (1.5, -1.5, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_63_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_63_material"
    {
        token outputs:surface.connect = </World/pn_wall_63_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.25905073, 0.25905073, 0.25905073)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_64"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (1.5, -1, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_64_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_64_material"
    {
        token outputs:surface.connect = </World/pn_wall_64_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.44157276, 0.44157276, 0.44157276)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_65"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (1.5, -0.5, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_65_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_65_material"
    {
        token outputs:surface.connect = </World/pn_wall_65_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.40358156, 0.40358156, 0.40358156)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_66"
    {
        float3 xformOp:scale = (0.25, 0.25, 0.5)
        double3 xformOp:translate = (1.5, 0, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_66_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_66_material"
    {
        token outputs:surface.connect = </World/pn_wall_66_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.7170035, 0.7170035, 0.7170035)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_67"
    {
        float3 xformOp:scale = (0.12853134, 0.12853134, 0.0156082045)
        double3 xformOp:translate = (1.5, 0.5, 0.01560820417400357)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_67_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_67_material"
    {
        token outputs:surface.connect = </World/pn_pillar_67_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.46916813, 0.46916813, 0.46916813)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_68"
    {
        float3 xformOp:scale = (0.13747096, 0.13747096, 0.015981814)
        double3 xformOp:translate = (2, -5.5, 0.015981814308336756)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_68_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_68_material"
    {
        token outputs:surface.connect = </World/pn_pillar_68_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.75395936, 0.75395936, 0.75395936)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_69"
    {
        float3 xformOp:scale = (0.18254879, 0.18254879, 0.023266863)
        double3 xformOp:translate = (2, -5, 0.023266863809522885)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_69_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_69_material"
    {
        token outputs:surface.connect = </World/pn_pillar_69_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.230353, 0.230353, 0.230353)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_70"
    {
        float3 xformOp:scale = (0.24534944, 0.24534944, 0.022950346)
        double3 xformOp:translate = (2, -4.5, 0.0229503448134994)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_70_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_70_material"
    {
        token outputs:surface.connect = </World/pn_pillar_70_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.7558202, 0.7558202, 0.7558202)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_71"
    {
        float3 xformOp:scale = (0.17284617, 0.17284617, 0.014578889)
        double3 xformOp:translate = (2, -3, 0.014578888882548926)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_71_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_71_material"
    {
        token outputs:surface.connect = </World/pn_pillar_71_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.32824838, 0.32824838, 0.32824838)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_72"
    {
        float3 xformOp:scale = (0.15684597, 0.15684597, 0.013232943)
        double3 xformOp:translate = (2, -2.5, 0.013232942499652237)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_72_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_72_material"
    {
        token outputs:surface.connect = </World/pn_pillar_72_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.7911853, 0.7911853, 0.7911853)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_73"
    {
        float3 xformOp:scale = (0.16825126, 0.16825126, 0.022300882)
        double3 xformOp:translate = (2, -2, 0.022300882524357118)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_73_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_73_material"
    {
        token outputs:surface.connect = </World/pn_pillar_73_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.4538045, 0.4538045, 0.4538045)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_74"
    {
        float3 xformOp:scale = (0.18336526, 0.18336526, 0.024942784)
        double3 xformOp:translate = (2, -1.5, 0.024942783618658926)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_74_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_74_material"
    {
        token outputs:surface.connect = </World/pn_pillar_74_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.631045, 0.631045, 0.631045)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_75"
    {
        float3 xformOp:scale = (0.2453064, 0.2453064, 0.016208848)
        double3 xformOp:translate = (2, -1, 0.016208847818682055)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_75_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_75_material"
    {
        token outputs:surface.connect = </World/pn_pillar_75_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.5475082, 0.5475082, 0.5475082)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_76"
    {
        float3 xformOp:scale = (0.10857479, 0.10857479, 0.021849694)
        double3 xformOp:translate = (2, -0.5, 0.021849694504738303)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_76_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_76_material"
    {
        token outputs:surface.connect = </World/pn_pillar_76_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.55050653, 0.55050653, 0.55050653)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_pillar_77"
    {
        float3 xformOp:scale = (0.12361491, 0.12361491, 0.023159)
        double3 xformOp:translate = (2, 0, 0.023158998650603568)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cylinder "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_pillar_77_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_pillar_77_material"
    {
        token outputs:surface.connect = </World/pn_pillar_77_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.7764673, 0.7764673, 0.7764673)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_78"
    {
        float3 xformOp:scale = (0.1, 6, 0.5)
        double3 xformOp:translate = (-3, 0, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_78_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_78_material"
    {
        token outputs:surface.connect = </World/pn_wall_78_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.31149498, 0.31149498, 0.31149498)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_79"
    {
        float3 xformOp:scale = (0.1, 6, 0.5)
        double3 xformOp:translate = (3, 0, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_79_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_79_material"
    {
        token outputs:surface.connect = </World/pn_wall_79_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.5570211, 0.5570211, 0.5570211)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_80"
    {
        float3 xformOp:scale = (3, 0.1, 0.5)
        double3 xformOp:translate = (0, -6, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_80_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_80_material"
    {
        token outputs:surface.connect = </World/pn_wall_80_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.6051275, 0.6051275, 0.6051275)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }

    def Xform "pn_wall_81"
    {
        float3 xformOp:scale = (3, 0.1, 0.5)
        double3 xformOp:translate = (0, 6, 0.5)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]

        def Cube "geom" (
            apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMaterialAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
        )
        {
            rel material:binding = </World/pn_wall_81_material>
            float physics:density = 1000
            float physics:dynamicFriction = 50
            bool physics:kinematicEnabled = 1
            float physics:restitution = 0.01
            bool physics:rigidBodyEnabled = 1
            float physics:staticFriction = 100
            float physxCollision:contactOffset = 0.02
            float physxCollision:restOffset = 0.001
        }
    }

    def Material "pn_wall_81_material"
    {
        token outputs:surface.connect = </World/pn_wall_81_material/diffuseShader.outputs:surface>

        def Shader "diffuseShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.34112233, 0.34112233, 0.34112233)
            float inputs:roughness = 0.4
            token outputs:surface
        }
    }
}

def DistantLight "SunLight"
{
    color3f inputs:color = (1, 1, 0.95)
    float inputs:intensity = 1000
    float3 xformOp:rotateXYZ = (-45, 0, 45)
    uniform token[] xformOpOrder = ["xformOp:rotateXYZ"]
}

